[{"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\index.js":"1","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\serviceWorker.js":"2","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\store.js":"3","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\views\\container\\App.js":"4","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\sagas.js":"5","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\reducers.js":"6","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\views\\container\\Inactive.js":"7","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\views\\container\\Active.js":"8","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\router\\types.js":"9","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\global\\types.js":"10","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\views\\components\\Loader.js":"11","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\data\\utils\\history.js":"12","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\router\\saga.js":"13","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\global\\saga.js":"14","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\global\\reducer.js":"15","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\views\\components\\InputDialog.js":"16","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\views\\components\\SongList.js":"17","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\views\\components\\SourceFilter.js":"18","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\search\\saga.js":"19","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\search\\reducer.js":"20","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\search\\types.js":"21","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\views\\components\\SongItem.js":"22","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\data\\utils\\utils.js":"23","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\data\\utils\\api\\basic.js":"24","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\data\\utils\\api\\host.js":"25","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\data\\utils\\api\\music.js":"26","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\data\\utils\\api\\dummies.js":"27","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\views\\components\\Header.js":"28","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\views\\components\\Footer.js":"29"},{"size":733,"mtime":1585215710694,"results":"30","hashOfConfig":"31"},{"size":5086,"mtime":1584964457495,"results":"32","hashOfConfig":"31"},{"size":389,"mtime":1585241942046,"results":"33","hashOfConfig":"31"},{"size":3037,"mtime":1609697247983,"results":"34","hashOfConfig":"31"},{"size":484,"mtime":1585566276074,"results":"35","hashOfConfig":"31"},{"size":250,"mtime":1585581908673,"results":"36","hashOfConfig":"31"},{"size":4576,"mtime":1585431867480,"results":"37","hashOfConfig":"31"},{"size":4494,"mtime":1586795202548,"results":"38","hashOfConfig":"31"},{"size":190,"mtime":1585256141784,"results":"39","hashOfConfig":"31"},{"size":251,"mtime":1585242796815,"results":"40","hashOfConfig":"31"},{"size":654,"mtime":1585301870689,"results":"41","hashOfConfig":"31"},{"size":89,"mtime":1585247077843,"results":"42","hashOfConfig":"31"},{"size":774,"mtime":1585253471364,"results":"43","hashOfConfig":"31"},{"size":2010,"mtime":1609698048117,"results":"44","hashOfConfig":"31"},{"size":650,"mtime":1586768721074,"results":"45","hashOfConfig":"31"},{"size":1289,"mtime":1585412936216,"results":"46","hashOfConfig":"31"},{"size":1730,"mtime":1587916846849,"results":"47","hashOfConfig":"31"},{"size":967,"mtime":1586787183693,"results":"48","hashOfConfig":"31"},{"size":3358,"mtime":1586796660847,"results":"49","hashOfConfig":"31"},{"size":921,"mtime":1586794772712,"results":"50","hashOfConfig":"31"},{"size":314,"mtime":1586771145902,"results":"51","hashOfConfig":"31"},{"size":1377,"mtime":1587810467964,"results":"52","hashOfConfig":"31"},{"size":2774,"mtime":1586796449676,"results":"53","hashOfConfig":"31"},{"size":945,"mtime":1609696539074,"results":"54","hashOfConfig":"31"},{"size":825,"mtime":1585257649976,"results":"55","hashOfConfig":"31"},{"size":1337,"mtime":1586796462388,"results":"56","hashOfConfig":"31"},{"size":5539,"mtime":1586625533734,"results":"57","hashOfConfig":"31"},{"size":1439,"mtime":1609697051793,"results":"58","hashOfConfig":"31"},{"size":1345,"mtime":1609697051793,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"ys6i41",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"62"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"62"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\index.js",[],["126","127"],"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\serviceWorker.js",[],"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\store.js",[],"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\views\\container\\App.js",["128"],"/******************************************************************************/\n// import area\n\nimport React, { Component } from 'react';\nimport { Provider } from 'react-redux'\nimport {\n    Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\n\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport Grid from '@material-ui/core/Grid';\n\n\n// utils\nimport store from '../../store/store'\nimport history from './../../data/utils/history'\nimport types from './../../store/global/types'\nimport routerTypes from './../../store/router/types'\n\n// views\nimport Loader from '../components/Loader'\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\n\nimport Inactive from './Inactive'\nimport Active from './Active'\n\n\n/******************************************************************************/\n// variables area\n\nconst action = type => store.dispatch({type})\n\nconst darkTheme = createMuiTheme({\n    palette: {\n      type: 'dark',\n    },\n  });\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n\n        this.className = this.constructor.name\n    }\n\n    componentDidMount() {\n        action(types.INIT_APPLICATION)\n    }\n\n    render() {\n        return (\n            <Provider store={store}>\n                <Router history={history}>\n                    <ThemeProvider theme={darkTheme}>\n                        <div className='App'>\n                            <Header />\n\n                            <Grid className='grid' container spacing={2} justify='center'>\n                                <Switch>\n                                    <Route exact path=\"/\">\n                                        <Grid item xs={11} sm={7} md={5} lg={4}>default</Grid>\n                                    </Route>\n                                    \n                                    <Route path={`/${routerTypes.PAGE_LOADING}`}>\n                                        <Grid item xs={11} sm={7} md={5} lg={4} className='centered-wrapper'><Loader title='Initialising Application' /></Grid>\n                                    </Route>\n                                    \n                                    <Route path={`/${routerTypes.PAGE_ACTIVE}`}>\n                                        <Grid item xs={11} sm={7} md={5} lg={4} className='centered-wrapper'><Inactive className='' /></Grid>\n                                    </Route>\n                                    \n                                    <Route path={`/${routerTypes.PAGE_INACTIVE}`}>\n                                        <Grid item xs={10} sm={7} md={5} lg={4} className='app-item full-height'><Inactive className='' /></Grid>\n                                    </Route>\n                                </Switch>\n                            </Grid>\n\n                            <Footer />\n                        </div>\n                    </ThemeProvider>\n                </Router>\n            </Provider>\n        )\n    }\n}\n\nexport default App;\n","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\sagas.js",[],"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\reducers.js",[],"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\views\\container\\Inactive.js",[],"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\views\\container\\Active.js",["129","130"],"/******************************************************************************/\r\n// import area\r\n\r\nimport React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport types from './../../store/search/types'\r\n\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nimport SourceFilter from './../components/SourceFilter';\r\nimport SongList from './../components/SongList';\r\n\r\n\r\n/******************************************************************************/\r\n// variables area\r\n\r\nlet delayTimer = undefined\r\n\r\nconst mapStateToProps = state => {\r\n    const { global, search } = state\r\n\r\n    return {\r\n        term: search.term,\r\n        filteredResults: search.filteredResults,\r\n        filter: search.filter\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        action: (type, payload) => dispatch({type: type, payload: payload})\r\n    }\r\n}\r\n\r\nclass Active extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.className = this.constructor.name\r\n        this.triggerSearch = false\r\n        this.onDelay = false \r\n        this.triggerDelay = 250\r\n        this.state = {\r\n            searchField: '',\r\n        }\r\n    }\r\n\r\n    onFilterChange = (event) => {\r\n        const name = event.currentTarget.id\r\n        const isActive = event.currentTarget.classList.contains(types.FILTER_ACTIVE)\r\n        const newState = isActive ? types.FILTER_INACTIVE : types.FILTER_ACTIVE\r\n\r\n        const payload = {\r\n            name: name,\r\n            state: newState\r\n        }\r\n\r\n        this.props.action(types.FILTER_CHANGED, payload)\r\n    }\r\n\r\n    onInputChange = (event) => {\r\n        const id = event.currentTarget.id\r\n        const value = event.currentTarget.value\r\n\r\n        this.setState((prevState, props) => ({\r\n            [id]: value\r\n        }));\r\n\r\n        if(!this.onDelay && !this.triggerSearch) {\r\n            this.onDelay = true\r\n\r\n            delayTimer = setTimeout(() => {\r\n                this.triggerSearch = true\r\n                this.onDelay = false\r\n\r\n            }, this.triggerDelay)\r\n        }\r\n\r\n        if(this.triggerSearch) {\r\n            console.log(`[${this.className}] auto search with: ${value}`);\r\n            \r\n            this.triggerSearch = false\r\n\r\n            this.props.action(types.SEARCH_INIT, value)\r\n        }\r\n    }\r\n\r\n    onSearch = (event) => {\r\n        let value = this.state.searchField\r\n\r\n        if(value && value !== '') {\r\n            console.log(`[${this.className}] trigger search with: ${value}`);\r\n            \r\n            this.props.action(types.SEARCH_INIT, value)\r\n        }\r\n    }\r\n\r\n    onKeySearch = (event) => {\r\n        if (event.keyCode === 13)\r\n            this.onSearch(event)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='active-page'>\r\n                <SourceFilter list={this.props.filter} onClick={this.onFilterChange} />\r\n\r\n                <FormControl className=''>\r\n                    <InputLabel htmlFor=\"searchField\" color='secondary'>title or interpret</InputLabel>\r\n                    <Input\r\n                        autoFocus\r\n                        fullWidth\r\n                        id='searchField'\r\n                        type='text'\r\n                        className='input'\r\n                        margin='dense'\r\n                        color='secondary'\r\n                        value={this.state['searchField']}\r\n                        onChange={this.onInputChange}\r\n                        onKeyUp={this.onKeySearch}\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                    aria-label=\"searchIcon\"\r\n                                    onClick={this.onSearch}\r\n                                >\r\n                                    <SearchIcon />\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        }\r\n                    />\r\n                </FormControl>\r\n\r\n                <SongList list={this.props.filteredResults} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Active)","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\router\\types.js",[],"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\global\\types.js",[],"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\views\\components\\Loader.js",[],"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\data\\utils\\history.js",[],"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\router\\saga.js",["131"],"/******************************************************************************/\r\n// import area\r\n\r\nimport { all, call, take } from 'redux-saga/effects'\r\n\r\nimport types from './types'\r\n\r\nimport history from '../../data/utils/history'\r\n\r\n/******************************************************************************/\r\n// variables area\r\n\r\nfunction* sagas() {\r\n    yield all([\r\n        watchPageChange()\r\n    ])\r\n}\r\n\r\nfunction* watchPageChange() {\r\n    while(true) {\r\n        const { payload } = yield take(types.PAGE_CHANGE)\r\n        yield call(changePage, payload)\r\n    }\r\n}\r\n\r\nfunction* changePage(payload) {\r\n    history.push(payload)\r\n}\r\n\r\n\r\n/******************************************************************************/\r\n// helper functions\r\n\r\n\r\nexport default sagas","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\global\\saga.js",[],"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\global\\reducer.js",[],"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\views\\components\\InputDialog.js",[],"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\views\\components\\SongList.js",[],"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\views\\components\\SourceFilter.js",["132","133"],"/******************************************************************************/\r\n// import area\r\n\r\nimport React from 'react';\r\nimport types from './../../store/search/types'\r\n\r\n/******************************************************************************/\r\n// variables area\r\n\r\nconst createSourceList = (source, onClick) => {\r\n    let parsedList = []\r\n    let rawList = source.entries()\r\n\r\n    for(let [key, value] of rawList) {\r\n        let entry = (\r\n            <div key={key} id={value.name} className={`source-wrapper ${value.state}`} onClick={onClick}>\r\n                <img className='image' src={value.image} />\r\n            </div>\r\n        )\r\n\r\n        parsedList.push(entry)\r\n    }\r\n\r\n    return parsedList\r\n}\r\n\r\nconst SourceFilter = ({ list, onClick }) => {\r\n    let parsedList = createSourceList(list, onClick)\r\n\r\n    return (\r\n        <div className='source-filter'>\r\n            { parsedList }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SourceFilter","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\search\\saga.js",[],"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\search\\reducer.js",["134","135"],"import types from './types'\r\n\r\nconst initialState = {\r\n    filter: [],\r\n    results: undefined,\r\n    filteredResults: undefined,\r\n    term: undefined\r\n}\r\n\r\nfunction search(state = initialState, action) {\r\n    let newState = Object.assign({}, state)\r\n\r\n    switch(action.type) {\r\n        case types.FILTER_INITIALISED: {\r\n            newState.filter = action.payload\r\n            break;\r\n        }\r\n\r\n        case types.FILTER_NEW: {\r\n            newState.filter = action.payload.filter\r\n            newState.filteredResults = action.payload.filteredResults\r\n    \r\n            break;\r\n        }\r\n\r\n        case types.SEARCH_INIT: {\r\n\r\n            break;\r\n        };\r\n\r\n        case types.SEARCH_RESULTS: {\r\n            newState.results = action.payload\r\n            newState.filteredResults = action.payload\r\n\r\n            break;\r\n        };\r\n\r\n        default: {}\r\n    }\r\n\r\n    return newState\r\n}\r\n\r\nexport default search","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\store\\search\\types.js",[],"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\views\\components\\SongItem.js",["136","137"],"/******************************************************************************/\r\n// import area\r\n\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\n/******************************************************************************/\r\n// variables area\r\n\r\n// props = {\r\n//     keyframe,\r\n//     song,\r\n//     artists,\r\n//     searchSource\r\n// }\r\n\r\nconst SongItem = (props) => {\r\n    return (\r\n        <div className={`song-item ${props.spacer}`}>\r\n            <div className='keyframe-wrapper'>\r\n                <img src={props.keyframe} />\r\n            </div>\r\n\r\n            {/* show placeholder if no text is available */}\r\n            <div className='text'>\r\n                <Typography className='song' variant='body1'>\r\n                    { props.song ? props.song : 'no song name available' }\r\n                </Typography>\r\n                <Typography className='artists' variant='subtitle2'>\r\n                    { props.artists ? props.artists : 'no artist available'}\r\n                </Typography>\r\n            </div>\r\n\r\n            {/* if source image is available */}\r\n            {\r\n                props.sourceIcon &&\r\n                <div className='source-wrapper'>\r\n                    <img className='image' src={props.sourceIcon} />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SongItem","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\data\\utils\\utils.js",[],"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\data\\utils\\api\\basic.js",[],"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\data\\utils\\api\\host.js",[],"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\data\\utils\\api\\music.js",["138","139","140"],"/******************************************************************************/\r\n// import area\r\n\r\nimport basic from './basic'\r\n\r\nimport { \r\n    zeroResults, \r\n    threeResults, \r\n    twentyResults \r\n} from './dummies'\r\n\r\n/******************************************************************************/\r\n// variables area\r\n\r\nconst searchUrl = 'search'\r\n\r\nclass Music {\r\n    search(url, payload) {\r\n        const term = payload.term\r\n        const filter = payload.filter\r\n        \r\n        let promise = new Promise((resolve, reject) => {\r\n            let query = `${url}/${searchUrl}`\r\n            \r\n\r\n            // NOTE: test purposes \r\n            if(term === 'Kaninchen')\r\n                resolve(zeroResults)\r\n            else if(term === 'pop')\r\n                resolve(threeResults)\r\n            else if(term === 'Linkin Park')\r\n                resolve(twentyResults)\r\n            else\r\n                resolve([])\r\n\r\n            // return basic.get(query)\r\n            // .then(response => {\r\n            //     resolve(response.body)\r\n            // })\r\n            // .catch(error => {\r\n            //     if(error.code === 0)\r\n            //         resolve(false)\r\n            //     else\r\n            //         reject(error)\r\n            // })\r\n        })\r\n\r\n        return promise\r\n    }\r\n}\r\n\r\nexport default new Music()","C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\data\\utils\\api\\dummies.js",[],"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\views\\components\\Header.js",[],"C:\\Users\\Lenny\\Documents\\Unterlagen\\Projekte\\Apollon_2.0\\repositories\\musicnet-client\\src\\views\\components\\Footer.js",[],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":29,"column":8,"nodeType":"147","messageId":"148","endLine":29,"endColumn":14},{"ruleId":"145","severity":1,"message":"149","line":26,"column":13,"nodeType":"147","messageId":"148","endLine":26,"endColumn":19},{"ruleId":"145","severity":1,"message":"150","line":78,"column":13,"nodeType":"147","messageId":"148","endLine":78,"endColumn":23},{"ruleId":"151","severity":1,"message":"152","line":26,"column":1,"nodeType":"153","messageId":"154","endLine":28,"endColumn":2},{"ruleId":"145","severity":1,"message":"155","line":5,"column":8,"nodeType":"147","messageId":"148","endLine":5,"endColumn":13},{"ruleId":"156","severity":1,"message":"157","line":17,"column":17,"nodeType":"158","endLine":17,"endColumn":60},{"ruleId":"159","severity":1,"message":"160","line":26,"column":33,"nodeType":"161","messageId":"162","endLine":29,"endColumn":10},{"ruleId":"159","severity":1,"message":"160","line":31,"column":36,"nodeType":"161","messageId":"162","endLine":36,"endColumn":10},{"ruleId":"156","severity":1,"message":"157","line":21,"column":17,"nodeType":"158","endLine":21,"endColumn":45},{"ruleId":"156","severity":1,"message":"157","line":38,"column":21,"nodeType":"158","endLine":38,"endColumn":69},{"ruleId":"145","severity":1,"message":"163","line":4,"column":8,"nodeType":"147","messageId":"148","endLine":4,"endColumn":13},{"ruleId":"145","severity":1,"message":"164","line":20,"column":15,"nodeType":"147","messageId":"148","endLine":20,"endColumn":21},{"ruleId":"145","severity":1,"message":"165","line":23,"column":17,"nodeType":"147","messageId":"148","endLine":23,"endColumn":22},"no-native-reassign",["166"],"no-negated-in-lhs",["167"],"no-unused-vars","'Active' is defined but never used.","Identifier","unusedVar","'global' is assigned a value but never used.","'delayTimer' is assigned a value but never used.","require-yield","This generator function does not have 'yield'.","FunctionDeclaration","missingYield","'types' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'basic' is defined but never used.","'filter' is assigned a value but never used.","'query' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]